%
%   Copyright 2020 Amir Kantor
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.
%

% ___File name:___ lean.hn

% ___File purpose:___ Horn knowledge base defining Lean's dialect of the 
% Calculus of Inductive Construcstions.

% Horn Knowledge Base
% ===================

% Natural Numbers
% ---------------

natural(zero_natual).
natural(succesor_natual(N)) :-
    natural(N).

% Universe Terms
% --------------

% `uterm(...)` = ... is a universe term
uterm(variable_uterm(N)) :-
    natural(N).  % subscript mark
uterm(zero_uterm).
uterm(successor_uterm(U)) :-
    uterm(U).
uterm(max_uterm(U1,U2)) :-
    uterm(U1),
    uterm(U2).
uterm(imax_uterm(U1,U2)) :-
    uterm(U1),
    uterm(U2).

% `uterm_list(...)` = ... is a list of universe terms
uterm_list(empty_uterm_list).
uterm_list(append_uterm_list(Us,U)) :-
    uterm_list(Us),
    uterm(U).

% Expressions
% -----------

% `expression(...E...)` = ...E... is an expression (a term and/or a type)
expression(variable_expression(N)) :-
    natural(N).  % subscript mark treated as de Bruijn index
expression(constant_expression(N,Us)) :-
    natural(N),  % subscript mark
    uterm_list(Us).
expression(sort_expression(U)) :-
    uterm(U).
expression(application_expression(E1,E2)) :-
    expression(E1),
    expression(E2).
expression(lambda_expression(E1,E2)) :-  % binding via de Bruijn indices
    expression(E1),  % type (unbound)
    expression(E2).  % term (bound)
expression(pi_expression(E1,E2)) :-  % binding via de Bruijn indices
    expression(E1),  % type (unbound)
    expression(E2).  % term (bound)

% `expression_list(...Es...)` = ...Es... is a list of expressions
expression_list(empty_expression_list).
expression_list(append_expression_list(Es,E)) :-
    expression_list(Es),
    expression(E).

% Substitution
% ------------

% `substitute_uterm(...U..., ...Us_subst..., ...U_out...)` = 
%   uterm ...U_out... is the result of substituting uterm list ...Us_subst... for uterm variables 0, ..., length(Us_subst) - 1 in uterm ...U...

% `substitute_uterm_list(...Us..., ...Us_subst..., ...Us_out...)` = 
%   uterm list ...Us_out... is the result of substituting uterm list ...Us_subst... for uterm variables 0, ..., length(Us_subst) - 1 in uterm list ...Us...

% `substitute_expression(...E..., ...Es_subst..., ...E_out...)` = 
%   expression ...E_out... is the result of de Bruijn substitution of expression list ...Es_subst... for expression variables 0, ..., length(Es_subst) - 1 in expression ...E...

% `substitute_expression_list(...Es..., ...Es_subst..., ...Es_out...)` = 
%   expression list ...Es_out... is the result of de Bruijn substitution of expression list ...Es_subst... for expression variables 0, ..., length(Es_subst) - 1 in expression list ...Es...
